import pickle

from .api import FFI


MODULE_BOILERPLATE = """
#####                                                                  #####
##### NOTE: This module is generated by cffi. DO NOT EDIT IT MANUALLY. #####
#####                                                                  #####

import pickle
from cffi import FFI


_ffi = FFI()


### Proxy `_ffi` methods to make things more convenient.


typeof = _ffi.typeof
sizeof = _ffi.sizeof
alignof = _ffi.alignof
offsetof = _ffi.offsetof
new = _ffi.new
cast = _ffi.cast
string = _ffi.string
buffer = _ffi.buffer
callback = _ffi.callback
getctype = _ffi.getctype
gc = _ffi.gc


# Can't have properties on modules. :-(

def get_errno():
    return _ffi.errno

def set_errno(errno):
    _ffi.errno = errno


addressof = _ffi.addressof
new_handle = _ffi.new_handle
from_handle = _ffi.from_handle


### The functions below are generated by cffi.
"""


DLOPEN_FUNC_TEMPLATE = """
def load_%s():
    return _ffi.dlopen(%r, flags=%r)
"""


MAKELIB_FUNC_TEMPLATE = """
def load_%s():
    import os.path
    from cffi.verifier import Verifier
    module_path = os.path.dirname(__file__)
    verifier = Verifier(_ffi, None, module_path, %r, force_generic_engine=True)
    verifier._has_module = True
    return verifier._load_library()
"""


class FFIBuilder(object):
    def __init__(self, module_name, module_path, backend=None):
        self._module_name = module_name
        self._module_path = module_path
        self.ffi = FFI(backend=backend)
        self._built_files = []
        self._module_source = MODULE_BOILERPLATE

    def cdef(self, csource, override=False):
        self.ffi.cdef(csource, override=override)

    def add_dlopen(self, libname, name, flags=0):
        lib = self.ffi.dlopen(name, flags=flags)
        self._module_source += DLOPEN_FUNC_TEMPLATE % (libname, name, flags)
        return lib

    def makelib(self, libname, source='', **kwargs):
        # XXX: We use force_generic_engine here because vengine_cpy collects
        #      types when it writes the source.
        kwargs['force_generic_engine'] = True
        import os.path
        from .verifier import Verifier, _get_so_suffix
        self.ffi.verifier = Verifier(self.ffi, source, **kwargs)
        libfilename = '_'.join([self._module_name, libname])
        libfilepath = os.path.join(
            self._module_path, libfilename + _get_so_suffix())
        self.ffi.verifier.make_library(libfilepath)
        self._module_source += MAKELIB_FUNC_TEMPLATE % (libname, libfilename)
        self._built_files.append(libfilename + _get_so_suffix())

    def write_ffi_module(self):
        self._module_source += (
            "_ffi._parser._declarations = pickle.loads(%r)\n" %
            pickle.dumps(self.ffi._parser._declarations, 2))
        import os
        try:
            os.makedirs(self._module_path)
        except OSError:
            pass

        module_filename = self._module_name + '.py'
        module_filepath = os.path.join(self._module_path, module_filename)
        file = open(module_filepath, 'w')
        try:
            file.write(self._module_source)
        finally:
            file.close()
        self._built_files.append(module_filename)

    def list_built_files(self):
        return self._built_files
